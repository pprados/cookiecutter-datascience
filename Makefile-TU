#!/usr/bin/env make

# This is a unit test of all target of generated Makefile
# Use a temporay copy of data and VENV

SHELL=/bin/bash
.SHELLFLAGS = -e -c
.ONESHELL:

# OPT=-j
OPT=

PYTHON_VERSION=3.6
CONDA_BASE=$(shell conda info --base)
CONDA_PACKAGE:=$(CONDA_PREFIX)/lib/python$(PYTHON_VERSION)/site-packages
CONDA_PYTHON:=$(CONDA_PREFIX)/bin/python

ifndef NLTK_DATA
export NTLK_DATA
# La ligne suivante ralenti le Makefile. A activer qu'avec des env. spécifiques.
#NLTK_DATA:=$(shell python -c "import nltk.data; print(nltk.data.path[0])" 2>/dev/null || true)
# Sinon, utiliser le code suivant
ifeq ($(OS),Darwin)
ifeq ($(wildcard ~/nltk_data), )
NLTK_DATA=/usr/local/share/nltk_data
else
NLTK_DATA=~/nltk_data
endif
else ifeq ($(OS),Windows)
NLTK_DATA=C:/nltk_data
else
ifeq ($(wildcard ~/nltk_data), )
NLTK_DATA=/usr/share/nltk_data
else
NLTK_DATA=~/nltk_data
endif
endif
endif

.PHONY: dump-*
dump-%:
	@if [ "${${*}}" = "" ]; then
		echo "Environment variable $* is not set";
		exit 1;
	else
		echo "$*=${${*}}";
	fi

# Create a temporary VENV and DATA
# Warning, it's not a realy isolated environment with MT because, dist, etc
# are not cleaning. May be, duplicate all the project ?
define do_make
    @echo "---------------------------- $1"
	V=CC_temp_$(shell cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 10 | head -n 1)
	D=/tmp/$$V
	export NLTK_DATA=$${D}_nltk_data
	mkdir $$NLTK_DATA
	cp -Rf . $$D/
	pushd $$D/
    echo "$1"> test.txt
	source $(CONDA_BASE)/etc/profile.d/conda.sh
	conda create -n $$V -y python=$(PYTHON_VERSION)
	conda activate $$V
	rm -rf data/interim/* data/processed/* data/external/*
	CONDA_PACKAGE=$${CONDA_PREFIX}/lib/python$(PYTHON_VERSION)/site-packages
	export EC2_LIFE_CYCLE=--terminate
	export S3_BUCKET=s3://pprados
	export SPACY_DATABASE="$${CONDA_PACKAGE}/spacy/data/en"
	export NLTK_DATABASE="$${NLTK_DATA}/corpora/wordnet $${NLTK_DATA}/tokenizers/punkt $${NLTK_DATA}/corpora/stopwords"
	VENV=$$V $(MAKE) $(OPT) $1
	popd
	conda deactivate
	conda env remove -n $$V
	rm -Rf $$D
endef

.PHONY: help
.DEFAULT: help
help:
	$(call do_make,help)

.PHONY: dump
dump:
	$(call do_make,dump-CONDA_BASE)

.PḦONY: .git
.git:
	$(call do_make,.git)

.PHONY: .gitattributes
.gitattributes:
	$(call do_make,.gitattributes)

.PHONY: requirements
requirements:
	$(call do_make,requirements)

.PHONY: dependencies
dependencies:
	$(call do_make,dependencies)

.PHONY: $(CONDA_PYTHON)
$(CONDA_PYTHON):
	$(call do_make,$(CONDA_PYTHON))

.PHONY: NLTK
NLTK:
	$(call do_make,$${NLTK_DATA}/corpora/wordnet)
	$(call do_make,$${NLTK_DATA}/tokenizers/punkt)
	$(call do_make,$${NLTK_DATA}/corpora/stopwords)
	echo empty

.PHONY: spacy

spacy:
	 $(call do_make,$${CONDA_PACKAGE}/spacy/data/en)

.PHONY: configure
configure:
	$(call do_make,configure)

.PHONY: remove-venv
remove-venv:
	$(call do_make,remove-venv)

.PHONY: upgrade-venv
upgrade-venv:
	$(call do_make,upgrade-venv)

.PHONY: run
run:
	$(call do_make,run-phase1)

.PHONY: lint
lint:
	$(call do_make,lint)

.PHONY: typing
typing:
	$(call do_make,typing)

.PHONY: add-typing
add-typing:
	$(call do_make,typing)
#-------------------
.PHONY: build
build_html:
	$(call do_make,build/html)
build_latexpdf:
	$(call do_make,build/latexpdf)

# PPR BUG in framework latexpdf build: build_html build_latexpdf
build: build_html

#-------------------
.PHONY: remove-kernel
remove-kernel:
	$(call do_make,remove-kernel)


.PHONY: nb-run
nb-run:
	$(call do_make,nb-run-phase1)


.PHONY: notebook
# notebook


.PHONY: nb-convert
nb-convert:
	$(call do_make,nb-convert)

.PHONY: clean-notebooks
clean-notebooks:
	$(call do_make,clean-notebooks)

#-------------------
.PHONY: sdist bdist dist
sdist:
	$(call do_make,sdist)

bdist:
	$(call do_make,bdist)

dist:
	$(call do_make,dist)

#-------------------
.PHONY: release check-twine test-twine
release:
	$(call do_make,release)

check-twine:
	$(call do_make,check-twine)

test-twine:
	$(call do_make,test-twine)
#-------------------
.PHONY: clean-pyc clean-build clean-pip clean-venv clean clean-all
clean-pyc:
	$(call do_make,clean-pyc)

clean-build:
	$(call do_make,clean-build)

clean-pip:
	$(call do_make,clean-pip)

clean-venv:
	$(call do_make,clean-venv)

clean:
	$(call do_make,clean)

clean-all:
	$(call do_make,clean-all)

#-------------------
.PHONY: test validate
test:
	$(call do_make,test)

validate:
	$(call do_make,validate)

#-------------------
.PHONY: sync_to_s3 sync_from_s3
sync_to_s3:
	$(call do_make,sync_to_s3/raw)

sync_from_s3:
	$(call do_make,sync_from_s3/raw)

S3: sync_to_s3 sync_from_s3

#-------------------
.PHONY: dvc-external lock metrics
dvc-external:
	$(call do_make,dvc-external-s3cache)
lock:
	$(call do_make,lock-external)
metrics:
	$(call do_make,metrics)
# PPR
DVC=dvc-external lock metrics
#-------------------
ec2:
	$(call do_make,ec2-clean)

ec2-tmux:
	$(call do_make,ec2-tmux-clean)
ec2-attach:
	$(call do_make,ec2-detach-clean ec2-attach ; ssh-ec2 --terminate :)
ec2-finish:
	$(call do_make,ec2-detach-clean ec2-finish)
ec2-notebook:
	$(call do_make,ec2-notebook)
EC2: ec2 ec2-tmux ec2-finish

#-------------------
.PHONY: prepare features train evalutate visualize
prepare:
	$(call do_make,prepare)

features:
	$(call do_make,features)

train:
	$(call do_make,train)

evaluate:
	$(call do_make,evaluate)

visualize:
	$(call do_make,visualize)
#-------------------
# Group services
STD: .git .gitattributes requirements dependencies \
	configure remove-venv upgrade-venv \
    $(CONDA_PYTHON)

DIST: sdist bdist dist
CLEAN: clean-pyc clean-build clean-venv clean clean-all
TEST: test validate lint typing add-typing
ML: prepare features train evaluate visualize

#-------------------
# Group of options
NOT_TESTED: DVC clean-pip check-twine test-twine release ec2-attach ec2-notebook
TEXT_PROCESSING:spacy NLTK
DEFAULT: CLEAN STD DIST TEST ML
DOCS: build
JUPYTER: remove-kernel nb-run nb-convert add-typing clean-notebooks
AWS: S3 EC2
OPENSOURCE: dist

clean-test:
	rm -Rf /tmp/CC_temp* /tmp/make-* /tmp/ssh-ec2-* temp*.sh ~/.local/share/jupyter/kernels/cc_temp*